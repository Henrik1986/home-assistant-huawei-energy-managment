alias: "Batteri – Schemalagd laddning 2-1b med SoC-kontroll"
description: >
  Startar laddning (ToU) under billigt tidsfönster (2-1b) om batteriet har för låg laddning. 
  Annars hålls Maximize self-consumption aktivt.
mode: single

trigger:
  - platform: time_pattern
    minutes: "/15"  # Kontroll var 15:e minut

condition:
  - condition: state
    entity_id: input_boolean.manual_charge
    state: "off"

action:
  - choose:

      # 1: Aktivera ToU (Time Of Use) om batteriet behöver laddas inom intervall
      - conditions:
          - condition: template
            value_template: >-
              {% set needed_kwh = states('sensor.battery_charge_energy_2_1b') | float(0) %}
              {% set interval_raw = states('sensor.battery_charge_window_cheapest_2') %}
              {% if ' - ' not in interval_raw %}
                false
              {% else %}
                {% set start_str, end_str = interval_raw.split(' - ') %}
                {% set start_time = start_str | as_datetime %}
                {% set end_time = end_str | as_datetime %}
                {% set now_time = now() %}
                {{ start_time <= now_time <= end_time and needed_kwh > 0 }}
              {% endif %}
          - condition: template
            value_template: "{{ states('select.batteries_working_mode') != 'time_of_use_luna2000' }}" # HINDRAR ONÖDIGA ÄNDRINGAR
        sequence:
          - action: huawei_solar.set_tou_periods
            data:
              device_id: 3b9da000027a871e418238a41b828eaa
              periods: 00:00-23:59/1234567/+
          - delay: 00:01:00
          - service: select.select_option
            target:
              entity_id: select.batteries_working_mode
            data:
              option: "time_of_use_luna2000"  # Sätt batteriet i ToU-läge


      # 2: Standardläge Maximize self-consumption annars
      - conditions:
          - condition: template
            value_template: >-
              {% set needed_kwh = states('sensor.battery_charge_energy_2_1b') | float(0) %}
              {% set interval_raw = states('sensor.battery_charge_window_cheapest_2') %}
              {% if ' - ' not in interval_raw %}
                false
              {% else %}
                {% set start_str, end_str = interval_raw.split(' - ') %}
                {% set start_time = start_str | as_datetime %}
                {% set end_time = end_str | as_datetime %}
                {% set now_time = now() %}
                {{ start_time <= now_time <= end_time and needed_kwh <= 0 }}
              {% endif %}
          - condition: template
            value_template: "{{ states('select.batteries_working_mode') != 'maximise_self_consumption' }}" #HINDRAR ONÖDIGA ÄNDRINGAR
        sequence:
          - service: select.select_option
            target:
              entity_id: select.batteries_working_mode
            data:
              option: "maximise_self_consumption"  # Standardläge

