type: custom:apexcharts-card
update_interval: 5 min
graph_span: 48h
cache: false
span:
  start: day
  offset: +0H
header:
  title: Spotpris 48h ink moms
  show: false
  show_states: true
  colorize_states: true
hours_12: false
stacked: false
experimental:
  color_threshold: true
yaxis:
  - id: spotpris
    opposite: false
    show: true
    decimals: 1
    min: 0
    apex_config:
      title:
        text: Elpris (SEK/kWh)
  - id: battery
    opposite: true
    show: true
    decimals: 0
    max: 100
    min: 0
    apex_config:
      title:
        text: Batterinivå (%)
  - id: import
    opposite: true
    show: false
    min: 0
    decimals: 1
    apex_config:
      title:
        text: Energi (kWh)
  - id: export
    opposite: true
    show: true
    decimals: 1
    apex_config:
      title:
        text: Energi (kWh)
  - id: solar_power
    opposite: true
    show: false
  - id: charge/expensive
    opposite: true
    show: false
apex_config:
  chart:
    height: 255
    animations:
      enabled: true
      easing: easeinout
      speed: 800
      animateGradually:
        enabled: true
        delay: 150
  legend:
    show: true
    floating: false
    offsetY: 5
    position: bottom
    fontSize: 10px
  tooltip:
    enabled: false
  xaxis:
    labels:
      show: true
      rotate: 0
      rotateAlways: true
      logarithmic: false
  stroke:
    width: 1
  plotOptions:
    candlestick:
      colors:
        upward: "#00B746"
        downward: "#EF403C"
      wick:
        useFillColor: true
all_series_config:
  show:
    legend_value: false
    datalabels: false
    in_brush: false
  float_precision: 3
  invert: false
  fill_raw: last
now:
  show: true
  label: NU
  color: red
series:
  - entity: sensor.solar_forecast_west
    yaxis_id: solar_power
    data_generator: |
      return entity.attributes.west.watts.map((entry) => {
        return [new Date(entry.date), entry.values / 1000]; // Konvertera till kWh
      });
    name: Solel
    type: area
    color: orange
    opacity: 0.7
    stroke_width: 3
    color_threshold:
      - value: 0
        color: "#fff9c4"
      - value: 5
        color: "#ffeb3b"
      - value: 15
        color: "#fbc02d"
  - entity: sensor.YOUR_NORDPOOL_SENSOR
    yaxis_id: spotpris
    type: area
    name: Idag
    opacity: 0.7
    color: grey
    extend_to: false
    data_generator: |
      const data = entity.attributes.raw_today.map((start, index) => {
        return [new Date(start["start"]).getTime(), start["value"]];
      });
      const last = entity.attributes.raw_today.slice(-1)[0];
      const lastTime = new Date(last["start"]).getTime();
      data.push([lastTime + 3600000, last["value"]]); // 
      return data;
    color_threshold:
      - value: -1
        color: 1E90FF
      - value: 0.5
        color: "008000"
      - value: 1
        color: DAA520
      - value: 2
        color: FF0000
    show:
      legend_value: false
      datalabels: false
      extremas: true
      in_brush: false
      in_legend: false
  - entity: sensor.YOUR_NORDPOOL_SENSOR
    yaxis_id: spotpris
    name: Imorgon
    type: area
    opacity: 0.7
    color: grey
    data_generator: >
      const data = entity.attributes.raw_tomorrow.map((start, index) => {
        return [new Date(start["start"]).getTime(), start["value"]];
      });

      const last = entity.attributes.raw_tomorrow.slice(-1)[0]; const lastTime =
      new Date(last["start"]).getTime();

      data.push([lastTime + 3600000, last["value"]]);

      return data;
    color_threshold:
      - value: -1
        color: 1E90FF
      - value: 0.5
        color: "008000"
      - value: 1
        color: DAA520
      - value: 2
        color: FF0000
    show:
      legend_value: false
      datalabels: false
      extremas: true
      in_brush: false
      in_legend: false
  - entity: sensor.battery_supercheap_decision
    yaxis_id: charge/expensive
    name: Superbilligt fönster
    color: green
    type: area
    opacity: 0.7
    data_generator: |
      const data = [];
      const sensorData = entity.state.split(' - ');
      function parseLocalTime(str) {
        const parts = str.split(/[- :T]/).map(Number);
        const date = new Date(parts[0], parts[1] - 1, parts[2], parts[3], parts[4]);
        return date.getTime();
      }
      const startTime = parseLocalTime(sensorData[0]);
      const endTime = parseLocalTime(sensorData[1]);
      data.push([startTime, 4]);
      data.push([startTime, 4]);
      data.push([endTime, 4]);
      data.push([endTime, 0]);
      return data;
    show:
      legend_value: false
      datalabels: false
      extremas: false
      in_brush: false
      in_legend: true
  - entity: sensor.battery_charge_window_cheapest_1a
    yaxis_id: charge/expensive
    name: Laddningsfönster
    opacity: 0.7
    color: "#00406c"
    type: area
    data_generator: |
      const data = [];
      const sensorData = entity.state.split(' - ');
      function parseLocalTime(str) {
        const parts = str.split(/[- :T]/).map(Number);
        const date = new Date(parts[0], parts[1] - 1, parts[2], parts[3], parts[4]);
        return date.getTime();
      }
      const startTime = parseLocalTime(sensorData[0]);
      const endTime = parseLocalTime(sensorData[1]);
      data.push([startTime, 3]);
      data.push([startTime, 3]);
      data.push([endTime, 3]);
      data.push([endTime, 0]);
      return data;
    show:
      legend_value: false
      datalabels: false
      extremas: false
      in_brush: false
      in_legend: true
  - entity: sensor.battery_charge_window_cheapest_2
    yaxis_id: charge/expensive
    name: Laddning 2
    opacity: 0.7
    color: "#00406c"
    type: area
    data_generator: |
      const data = [];
      const sensorData = entity.state.split(' - ');
      function parseLocalTime(str) {
        const parts = str.split(/[- :T]/).map(Number);
        const date = new Date(parts[0], parts[1] - 1, parts[2], parts[3], parts[4]);
        return date.getTime();
      }
      const startTime = parseLocalTime(sensorData[0]);
      const endTime = parseLocalTime(sensorData[1]);
      data.push([startTime, 3]);
      data.push([startTime, 3]);
      data.push([endTime, 3]);
      data.push([endTime, 0]);
      return data;
    show:
      legend_value: false
      datalabels: false
      extremas: false
      in_brush: false
      in_legend: false
  - entity: sensor.battery_charge_window_cheapest_1b
    yaxis_id: charge/expensive
    name: Laddning 3
    opacity: 0.7
    color: "#00406c"
    type: area
    data_generator: |
      const data = [];
      const sensorData = entity.state.split(' - ');
      function parseLocalTime(str) {
        const parts = str.split(/[- :T]/).map(Number);
        const date = new Date(parts[0], parts[1] - 1, parts[2], parts[3], parts[4]);
        return date.getTime();
      }
      const startTime = parseLocalTime(sensorData[0]);
      const endTime = parseLocalTime(sensorData[1]);
      data.push([startTime, 3]);
      data.push([startTime, 3]);
      data.push([endTime, 3]);
      data.push([endTime, 0]);
      return data;
    show:
      legend_value: false
      datalabels: false
      extremas: false
      in_brush: false
      in_legend: false
view_layout:
  position: main
