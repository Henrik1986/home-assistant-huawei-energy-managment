    - name: huseffekt_exl_elbil
      unique_id: huseffekt_exl_elbil
      unit_of_measurement: "kW"
      state: >
        {% set net_power = states('sensor.power_meter_active_power') | float(0) %} #YOUR ACTIVE POWER METER EXPORT/IMPORT
        {% set import = -net_power if net_power < 0 else 0 %}
        {% set export = net_power if net_power > 0 else 0 %}
        {% set elbil = states('sensor.ADD_YOUR_WALLBOX') | float(0) %}  #YOUR WALLBOX POWER IN kW
        {% set batt = states('sensor.batteries_charge_discharge_power') | float(0) %} #YOUR BATTERY DISCHARGE POWER
        {% set solar = states('sensor.input_power_with_efficiency_loss_kw') | float(0) %} #YOUR SOLAR POWER

        {# Batteriurladdning hjälper huset, batteriladdning ska dras bort #}
        {% set batt_out = -batt if batt < 0 else 0 %}
        {% set batt_in = batt if batt > 0 else 0 %}

        {# Huseffekt = solel + köpt el + urladdning - export - elbil - batteriladdning #}
        {% set huseffekt = (solar + import + batt_out) - (export + elbil + batt_in) %}

        {{ [huseffekt, 0] | max | round(2) }}

--------------------------------------------------------------------------------------------------------
    - name: "battery_charge_energy_1a_2"
      unique_id: battery_charge_energy_1a_2
      unit_of_measurement: "kWh"
      state: >
           {% set raw_start = states('sensor.battery_charge_window_cheapest_1a') %}
           {% set raw_end = states('sensor.battery_charge_window_cheapest_2') %}

           {% if ' - ' in raw_start and ' - ' in raw_end %}
                    {% set t1 = raw_start.split(' - ')[0] %}  {# Starttid #}
                    {% set t2 = raw_end.split(' - ')[0] %}    {# Sluttid #}
                    {% set start = as_datetime(t1) %}
                    {% set end = as_datetime(t2) %}
           {% else %}
                    {% set start = as_datetime('1970-01-01T00:00:00+00:00') %}
                    {% set end = as_datetime('1970-01-01T01:00:00+00:00') %}
           {% endif %}


            {% set sensors = {
                'morning': (5, 10, states('sensor.energy_avg_morning') | float(0)),
                'day': (10, 15, states('sensor.energy_avg_day') | float(0)),
                'evening': (15, 21, states('sensor.energy_avg_evening') | float(0)),
                'night_evening': (22, 0, states('sensor.energy_avg_night') | float(0)),
                'night_morning': (0, 5, states('sensor.energy_avg_night') | float(0))
            } %}

            {% set ns = namespace(total_kwh=0, debug={}) %}
            {% for block, (h_start, h_end, effect) in sensors.items() %}
                {% set block_start = start.replace(hour=h_start % 24, minute=0, second=0, microsecond=0) %}
                {% set block_end = start.replace(hour=h_end % 24, minute=0, second=0, microsecond=0) %}
                {% if h_start >= h_end and block_end <= block_start %}
                    {% set block_end = block_end + timedelta(days=1) %}
                {% endif %}
                {% set overlap_start = [start, block_start] | max %}
                {% set overlap_end = [end, block_end] | min %}
                {% set delta = (overlap_end - overlap_start).total_seconds() / 3600 %}
                {% if delta > 0 %}
                    {% set ns.total_kwh = ns.total_kwh + delta * effect %}
                    {% set ns.debug = dict(ns.debug, **{block: {'delta': delta, 'effect': effect, 'energy': delta * effect}}) %}
                {% endif %}
            {% endfor %}

            {% set forecast = state_attr('sensor.solar_forecast_west', 'west') %}
            {% set solar_kwh = 0 %}
            {% set solar_interval_start = none %}
            {% set solar_interval_end = none %}

            {% if forecast and 'watt_hours_period' in forecast %}
                {% set start_ts = as_timestamp(start) %}
                {% set end_ts = as_timestamp(end) %}
                {% set today_date = start.date() %}
                {% set entries = forecast['watt_hours_period']
                    | selectattr('date', 'defined')
                    | selectattr('date', '>=', start_ts | timestamp_local)
                    | selectattr('date', '<=', end_ts | timestamp_local)
                    | selectattr('date', 'match', '^' ~ today_date|string)
                    | list %}
                {% set valid_entries = entries
                    | selectattr('values', 'defined')
                    | selectattr('values', '>', 0)
                    | list %}

                {% if valid_entries | length > 0 %}
                    {% set solar_interval_start = (valid_entries[0].date | as_datetime).replace(minute=0, second=0, microsecond=0) %}
                    {% set solar_interval_end = (valid_entries[-1].date | as_datetime).replace(minute=0, second=0, microsecond=0) %}
                    {% set solar_kwh = (valid_entries | map(attribute='values') | sum | default(0)) / 1000 * 0.9 %}
                {% endif %}
            {% endif %}

            {% set ns_solar = namespace(kwh=0, debug={}) %}
            {% if solar_interval_start and solar_interval_end %}
                {% set s_start = solar_interval_start %}
                {% set s_end = solar_interval_end %}
                {% for block, (h_start, h_end, effect) in sensors.items() %}
                    {% set block_start = s_start.replace(hour=h_start % 24, minute=0, second=0, microsecond=0) %}
                    {% set block_end = s_start.replace(hour=h_end % 24, minute=0, second=0, microsecond=0) %}
                    {% if h_start >= h_end and block_end <= block_start %}
                        {% set block_end = block_end + timedelta(days=1) %}
                    {% endif %}
                    {% set overlap_start = [s_start, block_start] | max %}
                    {% set overlap_end = [s_end, block_end] | min %}
                    {% set delta = (overlap_end - overlap_start).total_seconds() / 3600 %}
                    {% if delta > 0 %}
                        {% set ns_solar.kwh = ns_solar.kwh + delta * effect %}
                        {% set ns_solar.debug = dict(ns_solar.debug, **{block: {'delta': delta, 'effect': effect, 'energy': delta * effect}}) %}
                    {% endif %}
                {% endfor %}
            {% endif %}

            {% set ns_no_solar = namespace(kwh=0, debug={}) %}
            {% if solar_interval_start and solar_interval_end %}
                {% set no_solar_start = solar_interval_end %}
                {% set no_solar_end = end %}

                {% for block, (h_start, h_end, effect) in sensors.items() %}
                    {% set block_start = no_solar_start.replace(hour=h_start, minute=0, second=0, microsecond=0) %}
                    {% set block_end = no_solar_start.replace(hour=h_end, minute=0, second=0, microsecond=0) %}

                    {% if h_start >= h_end %}
                        {% set block_end = block_end + timedelta(days=1) %}
                    {% endif %}

                    {% if block_start < no_solar_start %}
                        {% set block_start = block_start + timedelta(days=1) %}
                    {% endif %}

                    {% if block_end < no_solar_start %}
                        {% set block_end = block_end + timedelta(days=1) %}
                    {% endif %}

                    {% set overlap_start = [no_solar_start, block_start] | max %}
                    {% set overlap_end = [no_solar_end, block_end] | min %}
                    {% set delta = (overlap_end - overlap_start).total_seconds() / 3600 %}

                    {% if delta > 0 %}
                        {% set ns_no_solar.kwh = ns_no_solar.kwh + delta * effect %}
                        {% set ns_no_solar.debug = dict(ns_no_solar.debug, **{block: {'delta': delta, 'effect': effect, 'energy': delta * effect}}) %}
                    {% endif %}
                {% endfor %}
            {% endif %}

            {# --- Justerad beräkning med min SoC --- #}
            {% set battery_capacity = states('input_number.battery_total_capacity_kwh') | float(0) %}
            {% set battery_soc_percent = states('sensor.batteries_state_of_capacity') | float(0) %}
            {% set min_soc = states('number.batteries_end_of_discharge_soc') | float(0) %}

            {% set safe_den = (100 - min_soc) %}
            {% if safe_den <= 0 %}
                {% set usable_capacity = 0 %}
                {% set battery_charge_kwh = 0 %}
            {% else %}
                {% set usable_capacity = battery_capacity * ((100 - min_soc) / 100) %}
                {% set soc_clamped = battery_soc_percent %}
                {% if soc_clamped < min_soc %}
                    {% set soc_clamped = min_soc %}
                {% endif %}
                {% if soc_clamped > 100 %}
                    {% set soc_clamped = 100 %}
                {% endif %}
                {% set battery_charge_kwh = usable_capacity * ((soc_clamped - min_soc) / safe_den) %}
            {% endif %}

            {% set buffer = states('input_number.battery_buffer_kwh') | float(0) %}

            {% set solar_diff = [ns_solar.kwh - solar_kwh, 0] | max %}
            {% set raw_total = ns_no_solar.kwh + solar_diff - battery_charge_kwh + buffer %}
            {% set total_energy_need = [raw_total, 0] | max %}

            {{ total_energy_need | round(2) }}

      attributes:
            search_interval: >
                {% set raw_start = states('sensor.battery_charge_window_cheapest_1a') %}
                {% set raw_end = states('sensor.battery_charge_window_cheapest_2') %}
                {% if ' - ' in raw_start and ' - ' in raw_end %}
                    {% set t1 = raw_start.split(' - ')[0] %}
                    {% set t2 = raw_end.split(' - ')[0] %}
                    {% set start = as_datetime(t1) %}
                    {% set end = as_datetime(t2) %}
                {% else %}
                    {% set start = as_datetime('1970-01-01T00:00:00+00:00') %}
                    {% set end = as_datetime('1970-01-01T01:00:00+00:00') %}
                {% endif %}
                {{ start.isoformat() }} - {{ end.isoformat() }}

            sun_interval: >
              {% set raw_start = states('sensor.battery_charge_window_cheapest_1a') %}
              {% set raw_end = states('sensor.battery_charge_window_cheapest_2') %}

              {% if ' - ' in raw_start and ' - ' in raw_end %}
              {% set t1 = raw_start.split(' - ')[0] %}
              {% set t2 = raw_end.split(' - ')[0] %}
              {% set start = as_datetime(t1) %}
              {% set end = as_datetime(t2) %}
              {% else %}
              {% set start = as_datetime('1970-01-01T00:00:00+00:00') %}
              {% set end = as_datetime('1970-01-01T01:00:00+00:00') %}
              {% endif %}

              {% set forecast = state_attr('sensor.solar_forecast_west', 'west') %}
              {% set solar_interval_start = none %}
              {% set solar_interval_end = none %}

              {% if forecast and 'watt_hours_period' in forecast %}
              {% set start_ts = as_timestamp(start) %}
              {% set end_ts = as_timestamp(end) %}
              {% set today_date = start.date() %}
              {% set entries = forecast['watt_hours_period']
                 | selectattr('date', 'defined')
                 | selectattr('date', '>=', start_ts | timestamp_local)
                 | selectattr('date', '<=', end_ts | timestamp_local)
                 | selectattr('date', 'match', '^' ~ today_date|string)
                 | list %}
              {% set valid_entries = entries
                 | selectattr('values', 'defined')
                 | selectattr('values', '>', 0)
                 | list %}

              {% if valid_entries | length > 0 %}
                {% set solar_interval_start = (valid_entries[0].date | as_datetime).replace(minute=0, second=0, microsecond=0) %}
                {% set solar_interval_end = (valid_entries[-1].date | as_datetime).replace(minute=0, second=0, microsecond=0) %}
              {% endif %}
              {% endif %}

              {% if solar_interval_start and solar_interval_end %}
              {{ solar_interval_start.isoformat() }} - {{ solar_interval_end.isoformat() }}
              {% else %}
              {{ '1970-01-01T00:00:00+00:00 - 1970-01-01T00:00:00+00:00' }}
              {% endif %}
                
            no_sun_interval: >
                {% set raw_end = states('sensor.battery_charge_window_cheapest_2') %}
                {% set raw_start = states('sensor.battery_charge_window_cheapest_1a') %}
                {% if ' - ' in raw_start and ' - ' in raw_end %}
                    {% set t1 = raw_start.split(' - ')[0] %}
                    {% set t2 = raw_end.split(' - ')[0] %}
                    {% set start = as_datetime(t1) %}
                    {% set end = as_datetime(t2) %}
                {% else %}
                    {% set start = as_datetime('1970-01-01T00:00:00+00:00') %}
                    {% set end = as_datetime('1970-01-01T01:00:00+00:00') %}
                {% endif %}
                {% set forecast = state_attr('sensor.solar_forecast_west', 'west') %}
                {% set solar_interval_end = none %}
                {% if forecast and 'watt_hours_period' in forecast %}
                    {% set start_ts = as_timestamp(start) %}
                    {% set end_ts = as_timestamp(end) %}
                    {% set today_date = start.date() %}
                    {% set entries = forecast['watt_hours_period']
                       | selectattr('date', 'defined')
                       | selectattr('date', '>=', start_ts | timestamp_local)
                       | selectattr('date', '<=', end_ts | timestamp_local)
                       | selectattr('date', 'match', '^' ~ today_date|string)
                       | list %}
                    {% set valid_entries = entries
                       | selectattr('values', 'defined')
                       | selectattr('values', '>', 0)
                       | list %}
                    {% if valid_entries | length > 0 %}
                        {% set solar_interval_end = (valid_entries[-1].date | as_datetime).replace(minute=0, second=0, microsecond=0) %}
                    {% endif %}
                {% endif %}
                {% if solar_interval_end %}
                    {{ solar_interval_end.isoformat() }} - {{ end.isoformat() }}
                {% else %}
                    1970-01-01T00:00:00+00:00 - 1970-01-01T00:00:00+00:00
                {% endif %}

            battery_capacity: >
                {# Visar aktuell laddning i kWh *ovanför* min SoC (dvs det som faktiskt är användbart) #}
                {% set capacity = states('input_number.battery_total_capacity_kwh') | float(0) %}
                {% set soc = states('sensor.batteries_state_of_capacity') | float(0) %}
                {% set min_soc = states('number.batteries_end_of_discharge_soc') | float(0) %}
                {% set denom = (100 - min_soc) %}
                {% if denom <= 0 %}
                    {{ 0.0 }}
                {% else %}
                    {% set usable_capacity = capacity * ((100 - min_soc) / 100) %}
                    {% set soc_clamped = soc %}
                    {% if soc_clamped < min_soc %}
                        {% set soc_clamped = min_soc %}
                    {% endif %}
                    {% if soc_clamped > 100 %}
                        {% set soc_clamped = 100 %}
                    {% endif %}
                    {% set current_kwh = usable_capacity * ((soc_clamped - min_soc) / denom) %}
                    {{ current_kwh | round(2) }}
                {% endif %}

            buffer: >
                {% set buffer = states('input_number.battery_buffer_kwh') | float(0) %}
                {{ buffer | round(2) }}

            estimated_solar_energy: >
                {% set raw_start = states('sensor.battery_charge_window_cheapest_1a') %}
                {% set raw_end = states('sensor.battery_charge_window_cheapest_2') %}
                {% if ' - ' in raw_start and ' - ' in raw_end %}
                    {% set t1 = raw_start.split(' - ')[0] %}
                    {% set t2 = raw_end.split(' - ')[1] %}
                    {% set start = as_datetime(t1) %}
                    {% set end = as_datetime(t2) %}
                {% else %}
                    {% set start = as_datetime('1970-01-01T00:00:00+00:00') %}
                    {% set end = as_datetime('1970-01-01T01:00:00+00:00') %}
                {% endif %}
                {% set forecast = state_attr('sensor.solar_forecast_west', 'west') %}
                {% set solar_kwh = 0 %}
                {% if forecast and 'watt_hours_period' in forecast %}
                    {% set start_ts = as_timestamp(start) %}
                    {% set end_ts = as_timestamp(end) %}
                    {% set today_date = start.date() %}
                    {% set entries = forecast['watt_hours_period']
                        | selectattr('date', 'defined')
                        | selectattr('date', '>=', start_ts | timestamp_local)
                        | selectattr('date', '<=', end_ts | timestamp_local)
                        | selectattr('date', 'match', '^' ~ today_date|string)
                        | list %}
                    {% set valid_entries = entries
                        | selectattr('values', 'defined')
                        | selectattr('values', '>', 0)
                        | list %}
                    {% if valid_entries | length > 0 %}
                        {% set solar_kwh = (valid_entries | map(attribute='values') | sum | default(0)) / 1000 * 0.9 %}
                    {% endif %}
                {% endif %}
                {{ solar_kwh | round(2) }}

            estimated_energy_sun_interval: >
                {% set raw_start = states('sensor.battery_charge_window_cheapest_1a') %}
                {% set raw_end = states('sensor.battery_charge_window_cheapest_2') %}
                {% if ' - ' in raw_start and ' - ' in raw_end %}
                    {% set t1 = raw_start.split(' - ')[0] %}
                    {% set t2 = raw_end.split(' - ')[0] %}
                    {% set start = as_datetime(t1) %}
                    {% set end = as_datetime(t2) %}
                {% else %}
                    {% set start = as_datetime('1970-01-01T00:00:00+00:00') %}
                    {% set end = as_datetime('1970-01-01T01:00:00+00:00') %}
                {% endif %}
                {% set forecast = state_attr('sensor.solar_forecast_west', 'west') %}
                {% set solar_interval_start = none %}
                {% set solar_interval_end = none %}
                {% if forecast and 'watt_hours_period' in forecast %}
                    {% set start_ts = as_timestamp(start) %}
                    {% set end_ts = as_timestamp(end) %}
                    {% set today_date = start.date() %}
                    {% set entries = forecast['watt_hours_period']
                        | selectattr('date', 'defined')
                        | selectattr('date', '>=', start_ts | timestamp_local)
                        | selectattr('date', '<=', end_ts | timestamp_local)
                        | selectattr('date', 'match', '^' ~ today_date|string)
                        | list %}
                    {% set valid_entries = entries
                        | selectattr('values', 'defined')
                        | selectattr('values', '>', 0)
                        | list %}
                    {% if valid_entries | length > 0 %}
                        {% set solar_interval_start = (valid_entries[0].date | as_datetime).replace(minute=0, second=0, microsecond=0) %}
                        {% set solar_interval_end = (valid_entries[-1].date | as_datetime).replace(minute=0, second=0, microsecond=0) %}
                    {% endif %}
                {% endif %}
                {% set s_start = solar_interval_start %}
                {% set s_end = solar_interval_end %}
                {% set sensors = {
                    'morning': (5, 10, states('sensor.energy_avg_morning') | float(0)),
                    'day': (10, 15, states('sensor.energy_avg_day') | float(0)),
                    'evening': (15, 21, states('sensor.energy_avg_evening') | float(0)),
                    'night_evening': (22, 0, states('sensor.energy_avg_night') | float(0)),
                    'night_morning': (0, 5, states('sensor.energy_avg_night') | float(0))
                } %}
                {% set ns = namespace(kwh=0) %}
                {% if s_start and s_end %}
                    {% for block, (h_start, h_end, effect) in sensors.items() %}
                        {% set block_start = s_start.replace(hour=h_start % 24, minute=0, second=0, microsecond=0) %}
                        {% set block_end = s_start.replace(hour=h_end % 24, minute=0, second=0, microsecond=0) %}
                        {% if h_start >= h_end and block_end <= block_start %}
                            {% set block_end = block_end + timedelta(days=1) %}
                        {% endif %}
                        {% set overlap_start = [s_start, block_start] | max %}
                        {% set overlap_end = [s_end, block_end] | min %}
                        {% set delta = (overlap_end - overlap_start).total_seconds() / 3600 %}
                        {% if delta > 0 %}
                            {% set ns.kwh = ns.kwh + delta * effect %}
                        {% endif %}
                    {% endfor %}
                {% endif %}
                {{ ns.kwh | round(2) }}

            estimated_energy_no_sun_interval: >
                {% set raw_start = states('sensor.battery_charge_window_cheapest_1a') %}
                {% set raw_end = states('sensor.battery_charge_window_cheapest_2') %}
                {% if ' - ' in raw_start and ' - ' in raw_end %}
                    {% set t1 = raw_start.split(' - ')[0] %}
                    {% set t2 = raw_end.split(' - ')[0] %}
                    {% set start = as_datetime(t1) %}
                    {% set end = as_datetime(t2) %}
                {% else %}
                    {% set start = as_datetime('1970-01-01T00:00:00+00:00') %}
                    {% set end = as_datetime('1970-01-01T01:00:00+00:00') %}
                {% endif %}
                {% set forecast = state_attr('sensor.solar_forecast_west', 'west') %}
                {% set solar_interval_end = none %}
                {% if forecast and 'watt_hours_period' in forecast %}
                    {% set start_ts = as_timestamp(start) %}
                    {% set end_ts = as_timestamp(end) %}
                    {% set today_date = start.date() %}
                    {% set entries = forecast['watt_hours_period']
                        | selectattr('date', 'defined')
                        | selectattr('date', '>=', start_ts | timestamp_local)
                        | selectattr('date', '<=', end_ts | timestamp_local)
                        | selectattr('date', 'match', '^' ~ today_date|string)
                        | list %}
                    {% set valid_entries = entries
                        | selectattr('values', 'defined')
                        | selectattr('values', '>', 0)
                        | list %}
                    {% if valid_entries | length > 0 %}
                        {% set solar_interval_end = (valid_entries[-1].date | as_datetime).replace(minute=0, second=0, microsecond=0) %}
                    {% endif %}
                {% endif %}
                {% set s_start = solar_interval_end %}
                {% set s_end = end %}
                {% set sensors = {
                    'morning': (5, 10, states('sensor.energy_avg_morning') | float(0)),
                    'day': (10, 15, states('sensor.energy_avg_day') | float(0)),
                    'evening': (15, 21, states('sensor.energy_avg_evening') | float(0)),
                    'night_evening': (22, 0, states('sensor.energy_avg_night') | float(0)),
                    'night_morning': (0, 5, states('sensor.energy_avg_night') | float(0))
                } %}
                {% set ns = namespace(kwh=0) %}
                {% if s_start and s_end %}
                    {% for block, (h_start, h_end, effect) in sensors.items() %}
                        {% set block_start = s_start.replace(hour=h_start % 24, minute=0, second=0, microsecond=0) %}
                        {% set block_end = s_start.replace(hour=h_end % 24, minute=0, second=0, microsecond=0) %}
                        {% if h_start >= h_end and block_end <= block_start %}
                            {% set block_end = block_end + timedelta(days=1) %}
                        {% endif %}
                        {% if block_start < s_start %}
                            {% set block_start = block_start + timedelta(days=1) %}
                        {% endif %}
                        {% if block_end < s_start %}
                            {% set block_end = block_end + timedelta(days=1) %}
                        {% endif %}
                        {% set overlap_start = [s_start, block_start] | max %}
                        {% set overlap_end = [s_end, block_end] | min %}
                        {% set delta = (overlap_end - overlap_start).total_seconds() / 3600 %}
                        {% if delta > 0 %}
                            {% set ns.kwh = ns.kwh + delta * effect %}
                        {% endif %}
                    {% endfor %}
                {% endif %}
                {{ ns.kwh | round(2) }}

--------------------------------------------------------------------------------------------------------


    - name: "battery_charge_energy_2_1b"
      unique_id: battery_charge_energy_2_1b
      unit_of_measurement: "kWh"
      state: >
          {% set t1 = states('sensor.battery_charge_window_cheapest_2').split(' - ')[0] %}
          {% set t2 = states('sensor.battery_charge_window_cheapest_1b').split(' - ')[0] %}
          {% set start = as_datetime(t1) %}
          {% set end = as_datetime(t2) %}
          {% set original_start = start %}

          {% set sensors = {
            'morning': (5, 10, states('sensor.energy_avg_morning') | float(0)),
            'day': (10, 15, states('sensor.energy_avg_day') | float(0)),
            'evening': (15, 22, states('sensor.energy_avg_evening') | float(0)),
            'night_evening': (22, 24, states('sensor.energy_avg_night') | float(0)),
            'night_morning': (0, 5, states('sensor.energy_avg_night') | float(0))
          } %}

          {% set ns = namespace(total_kwh=0) %}

          {% for block, (h_start, h_end, effect) in sensors.items() %}
            {% set block_start = start.replace(hour=h_start % 24, minute=0, second=0, microsecond=0) %}
            {% set block_end = start.replace(hour=h_end % 24, minute=0, second=0, microsecond=0) %}
            {% if h_start >= h_end and block_start <= block_end %}
              {% set block_end = block_end + timedelta(days=1) %}
            {% endif %}
            {% set overlap_start = [start, block_start] | max %}
            {% set overlap_end = [end, block_end] | min %}
            {% set delta = (overlap_end - overlap_start).total_seconds() / 3600 %}
            {% if delta > 0 %}
              {% set ns.total_kwh = ns.total_kwh + delta * effect %}
            {% endif %}
          {% endfor %}

          {% set forecast = state_attr('sensor.solar_forecast_west', 'west') %}
          {% set solar_kwh = 0 %}
          {% set solar_interval_start = none %}
          {% set solar_interval_end = none %}

          {% if forecast and 'watt_hours_period' in forecast %}
            {% set start_ts = as_timestamp(start) %}
            {% set end_ts = as_timestamp(end) %}
            {% set entries = forecast['watt_hours_period']
              | selectattr('date', 'defined')
              | selectattr('date', '>=', start_ts | timestamp_local)
              | selectattr('date', '<=', end_ts | timestamp_local)
              | list %}

            {% set valid_entries = entries
              | selectattr('values', 'defined')
              | selectattr('values', '>', 0)
              | list %}

            {% if valid_entries | length > 0 %}
              {% set solar_interval_start = (valid_entries[0].date | as_datetime).replace(minute=0, second=0, microsecond=0) %}
              {% set solar_interval_end = (valid_entries[-1].date | as_datetime).replace(minute=0, second=0, microsecond=0) %}
              {% set solar_kwh = (valid_entries | map(attribute='values') | sum | default(0)) / 1000 * 0.9 %}
            {% endif %}
          {% endif %}

          {% set ns_solar = namespace(kwh=0) %}
          {% if solar_interval_start and solar_interval_end %}
            {% set s_start = solar_interval_start %}
            {% set s_end = solar_interval_end %}

            {% for block, (h_start, h_end, effect) in sensors.items() %}
              {% set block_start = s_start.replace(hour=h_start % 24, minute=0, second=0, microsecond=0) %}
              {% set block_end = s_start.replace(hour=h_end % 24, minute=0, second=0, microsecond=0) %}
              {% if h_start >= h_end and block_start <= block_end %}
                {% set block_end = block_end + timedelta(days=1) %}
              {% endif %}
              {% set overlap_start = [s_start, block_start] | max %}
              {% set overlap_end = [s_end, block_end] | min %}
              {% set delta = (overlap_end - overlap_start).total_seconds() / 3600 %}
              {% if delta > 0 %}
                {% set ns_solar.kwh = ns_solar.kwh + delta * effect %}
              {% endif %}
            {% endfor %}
          {% endif %}

          {% set ns_no_solar = namespace(kwh=0) %}
          {% if solar_interval_start %}
                    {% set no_solar_start = original_start %}
                    {% set no_solar_end = solar_interval_start %}

                    {% for block, (h_start, h_end, effect) in sensors.items() %}
                              {# Block start och end på samma datum som no_solar_start #}
                              {% set b_start = no_solar_start.replace(hour=h_start % 24, minute=0, second=0, microsecond=0) %}
                              {% set b_end = b_start.replace(hour=h_end % 24) %}

                              {# Om block sträcker sig över midnatt, lägg till 1 dag #}
                              {% if h_start >= h_end %}
                                        {% set b_end = b_end + timedelta(days=1) %}
                              {% endif %}

                              {# Om block är helt före intervallet, flytta till nästa dag #}
                              {% if b_end <= no_solar_start %}
                                        {% set b_start = b_start + timedelta(days=1) %}
                                        {% set b_end = b_end + timedelta(days=1) %}
                              {% endif %}

                              {# Beräkna överlapp #}
                              {% set overlap_start = [no_solar_start, b_start] | max %}
                              {% set overlap_end = [no_solar_end, b_end] | min %}
                              {% set delta = (overlap_end - overlap_start).total_seconds() / 3600 %}
                              {% if delta > 0 %}
                                        {% set ns_no_solar.kwh = ns_no_solar.kwh + delta * effect %}
                              {% endif %}
                    {% endfor %}
          {% endif %}


             {# --- Justerad beräkning med min SoC --- #}
            {% set battery_capacity = states('input_number.battery_total_capacity_kwh') | float(0) %}
            {% set battery_soc_percent = states('sensor.batteries_state_of_capacity') | float(0) %}
            {% set min_soc = states('number.batteries_end_of_discharge_soc') | float(0) %}

            {% set safe_den = (100 - min_soc) %}
            {% if safe_den <= 0 %}
                {% set usable_capacity = 0 %}
                {% set battery_charge_kwh = 0 %}
            {% else %}
                {% set usable_capacity = battery_capacity * ((100 - min_soc) / 100) %}
                {% set soc_clamped = battery_soc_percent %}
                {% if soc_clamped < min_soc %}
                    {% set soc_clamped = min_soc %}
                {% endif %}
                {% if soc_clamped > 100 %}
                    {% set soc_clamped = 100 %}
                {% endif %}
                {% set battery_charge_kwh = usable_capacity * ((soc_clamped - min_soc) / safe_den) %}
            {% endif %}
            
            {% set buffer = states('input_number.battery_buffer_kwh') | float(0) %}

            {% set solar_diff = [ns_solar.kwh - solar_kwh, 0] | max %}
            {% set raw_total = ns_no_solar.kwh + solar_diff - battery_charge_kwh + buffer %}
            {% set total_energy_need = [raw_total, 0] | max %}

            {{ total_energy_need | round(2) }}
      attributes:
          search_interval: >
            {% set t1 = states('sensor.battery_charge_window_cheapest_2').split(' - ')[0] %}
            {% set t2 = states('sensor.battery_charge_window_cheapest_1b').split(' - ')[0] %}
            {% set start = as_datetime(t1) %}
            {% set end = as_datetime(t2) %}
            {{ start.isoformat() }} - {{ end.isoformat() }}

          sun_interval: >
            {% set forecast = state_attr('sensor.solar_forecast_west', 'west') %}
            {% set t1 = states('sensor.battery_charge_window_cheapest_2').split(' - ')[0] %}
            {% set t2 = states('sensor.battery_charge_window_cheapest_1b').split(' - ')[0] %}
            {% set start = as_datetime(t1) %}
            {% set end = as_datetime(t2) %}
            {% set solar_interval_start = none %}
            {% set solar_interval_end = none %}
            {% if forecast and 'watt_hours_period' in forecast %}
              {% set start_ts = as_timestamp(start) %}
              {% set end_ts = as_timestamp(end) %}
              {% set entries = forecast['watt_hours_period']
                | selectattr('date', 'defined')
                | selectattr('date', '>=', start_ts | timestamp_local)
                | selectattr('date', '<=', end_ts | timestamp_local)
                | list %}
              {% set valid_entries = entries
                | selectattr('values', 'defined')
                | selectattr('values', '>', 0)
                | list %}
              {% if valid_entries | length > 0 %}
                {% set solar_interval_start = (valid_entries[0].date | as_datetime).replace(minute=0, second=0, microsecond=0) %}
                {% set solar_interval_end = (valid_entries[-1].date | as_datetime).replace(minute=0, second=0, microsecond=0) %}
              {% endif %}
            {% endif %}
            {% if solar_interval_start and solar_interval_end %}
              {{ solar_interval_start.isoformat() }} - {{ solar_interval_end.isoformat() }}
            {% else %}
              1970-01-01T00:00:00+00:00 - 1970-01-01T00:00:00+00:00
            {% endif %}

          no_sun_interval: >
            {% set t1 = states('sensor.battery_charge_window_cheapest_2').split(' - ')[0] %}
            {% set start = as_datetime(t1) %}
            {% set forecast = state_attr('sensor.solar_forecast_west', 'west') %}
            {% set solar_interval_start = none %}
            {% if forecast and 'watt_hours_period' in forecast %}
              {% set start_ts = as_timestamp(start) %}
              {% set entries = forecast['watt_hours_period']
                | selectattr('date', 'defined')
                | selectattr('date', '>=', start_ts | timestamp_local)
                | list %}
              {% set valid_entries = entries
                | selectattr('values', 'defined')
                | selectattr('values', '>', 0)
                | list %}
              {% if valid_entries | length > 0 %}
                {% set solar_interval_start = (valid_entries[0].date | as_datetime).replace(minute=0, second=0, microsecond=0) %}
              {% endif %}
            {% endif %}
            {% if solar_interval_start %}
              {{ start.isoformat() }} - {{ solar_interval_start.isoformat() }}
            {% else %}
              1970-01-01T00:00:00+00:00 - 1970-01-01T00:00:00+00:00
            {% endif %}

          battery_capacity: >
                {# Visar aktuell laddning i kWh *ovanför* min SoC (dvs det som faktiskt är användbart) #}
                {% set capacity = states('input_number.battery_total_capacity_kwh') | float(0) %}
                {% set soc = states('sensor.batteries_state_of_capacity') | float(0) %}
                {% set min_soc = states('number.batteries_end_of_discharge_soc') | float(0) %}
                {% set denom = (100 - min_soc) %}
                {% if denom <= 0 %}
                    {{ 0.0 }}
                {% else %}
                    {% set usable_capacity = capacity * ((100 - min_soc) / 100) %}
                    {% set soc_clamped = soc %}
                    {% if soc_clamped < min_soc %}
                        {% set soc_clamped = min_soc %}
                    {% endif %}
                    {% if soc_clamped > 100 %}
                        {% set soc_clamped = 100 %}
                    {% endif %}
                    {% set current_kwh = usable_capacity * ((soc_clamped - min_soc) / denom) %}
                    {{ current_kwh | round(2) }}
                {% endif %}
          
          buffer: >
                {% set buffer = states('input_number.battery_buffer_kwh') | float(0) %}
                {{ buffer | round(2) }}

          estimated_solar_energy: >
            {% set forecast = state_attr('sensor.solar_forecast_west', 'west') %}
            {% set t1 = states('sensor.battery_charge_window_cheapest_2').split(' - ')[0] %}
            {% set t2 = states('sensor.battery_charge_window_cheapest_1b').split(' - ')[0] %}
            {% set start = as_datetime(t1) %}
            {% set end = as_datetime(t2) %}
            {% set solar_kwh = 0 %}
            {% if forecast and 'watt_hours_period' in forecast %}
              {% set start_ts = as_timestamp(start) %}
              {% set end_ts = as_timestamp(end) %}
              {% set entries = forecast['watt_hours_period']
                | selectattr('date', 'defined')
                | selectattr('date', '>=', start_ts | timestamp_local)
                | selectattr('date', '<=', end_ts | timestamp_local)
                | list %}
              {% set valid_entries = entries
                | selectattr('values', 'defined')
                | selectattr('values', '>', 0)
                | list %}
              {% if valid_entries | length > 0 %}
                {% set solar_kwh = (valid_entries | map(attribute='values') | sum | default(0)) / 1000 * 0.9 %}
              {% endif %}
            {% endif %}
            {{ solar_kwh | round(2) }}

          estimated_energy_sun_interval: >
            {% set t1 = states('sensor.battery_charge_window_cheapest_2').split(' - ')[0] %}
            {% set t2 = states('sensor.battery_charge_window_cheapest_1b').split(' - ')[0] %}
            {% set start = as_datetime(t1) %}
            {% set end = as_datetime(t2) %}
            {% set forecast = state_attr('sensor.solar_forecast_west', 'west') %}
            {% set s_start = none %}
            {% set s_end = none %}
            {% if forecast and 'watt_hours_period' in forecast %}
              {% set start_ts = as_timestamp(start) %}
              {% set end_ts = as_timestamp(end) %}
              {% set entries = forecast['watt_hours_period']
                | selectattr('date', 'defined')
                | selectattr('date', '>=', start_ts | timestamp_local)
                | selectattr('date', '<=', end_ts | timestamp_local)
                | list %}
              {% set valid_entries = entries
                | selectattr('values', 'defined')
                | selectattr('values', '>', 0)
                | list %}
              {% if valid_entries | length > 0 %}
                {% set s_start = (valid_entries[0].date | as_datetime).replace(minute=0, second=0, microsecond=0) %}
                {% set s_end = (valid_entries[-1].date | as_datetime).replace(minute=0, second=0, microsecond=0) %}
              {% endif %}
            {% endif %}

            {% set sensors = {
              'morning': (5, 10, states('sensor.energy_avg_morning') | float(0)),
              'day': (10, 15, states('sensor.energy_avg_day') | float(0)),
              'evening': (15, 22, states('sensor.energy_avg_evening') | float(0)),
              'night_evening': (22, 24, states('sensor.energy_avg_night') | float(0)),
              'night_morning': (0, 5, states('sensor.energy_avg_night') | float(0))
            } %}
            {% set ns = namespace(kwh=0) %}

            {% if s_start and s_end %}
              {% for block, (h_start, h_end, effect) in sensors.items() %}
                {% set block_start = s_start.replace(hour=h_start % 24, minute=0, second=0, microsecond=0) %}
                {% set block_end = s_start.replace(hour=h_end % 24, minute=0, second=0, microsecond=0) %}
                {% if h_start >= h_end and block_start <= block_end %}
                  {% set block_end = block_end + timedelta(days=1) %}
                {% endif %}
                {% set overlap_start = [s_start, block_start] | max %}
                {% set overlap_end = [s_end, block_end] | min %}
                {% set delta = (overlap_end - overlap_start).total_seconds() / 3600 %}
                {% if delta > 0 %}
                  {% set ns.kwh = ns.kwh + delta * effect %}
                {% endif %}
              {% endfor %}
            {% endif %}

            {{ ns.kwh | round(2) }}

          estimated_energy_no_sun_interval: >
                    {% set t1 = states('sensor.battery_charge_window_cheapest_2').split(' - ')[0] %}
                    {% set start = as_datetime(t1) %}
                    {% set forecast = state_attr('sensor.solar_forecast_west', 'west') %}
                    {% set s_start = none %}

                    {% if forecast and 'watt_hours_period' in forecast %}
                              {% set entries = forecast['watt_hours_period']
                                | selectattr('date', 'defined')
                                | selectattr('date', '>=', as_timestamp(start) | timestamp_local)
                                | list %}
                              {% set valid_entries = entries
                                | selectattr('values', 'defined')
                                | selectattr('values', '>', 0)
                                | list %}
                              {% if valid_entries | length > 0 %}
                                        {% set s_start = (valid_entries[0].date | as_datetime).replace(minute=0, second=0, microsecond=0) %}
                              {% endif %}
                    {% endif %}

                    {% set end = s_start if s_start else start %}

                    {% set sensors = {
                              'morning': (5, 10, states('sensor.energy_avg_morning') | float(0)),
                              'day': (10, 15, states('sensor.energy_avg_day') | float(0)),
                              'evening': (15, 22, states('sensor.energy_avg_evening') | float(0)),
                              'night_evening': (22, 24, states('sensor.energy_avg_night') | float(0)),
                              'night_morning': (0, 5, states('sensor.energy_avg_night') | float(0))
                    } %}

                    {% set ns = namespace(kwh=0) %}

                    {% for block, (h_start, h_end, effect) in sensors.items() %}
                              {% set b_start = start.replace(hour=h_start % 24, minute=0, second=0, microsecond=0) %}
                              {% set b_end = b_start.replace(hour=h_end % 24) %}

                              {# Midnattblock hanteras #}
                              {% if h_start >= h_end %}
                                        {% set b_end = b_end + timedelta(days=1) %}
                              {% endif %}

                              {# Flytta block framåt om det ligger helt före intervallet #}
                              {% if b_end <= start %}
                                        {% set b_start = b_start + timedelta(days=1) %}
                                        {% set b_end = b_end + timedelta(days=1) %}
                              {% endif %}

                              {% set overlap_start = [start, b_start] | max %}
                              {% set overlap_end = [end, b_end] | min %}
                              {% set delta = (overlap_end - overlap_start).total_seconds() / 3600 %}

                              {% if delta > 0 %}
                                        {% set ns.kwh = ns.kwh + delta * effect %}
                              {% endif %}
                    {% endfor %}

                    {{ ns.kwh | round(2) }}


--------------------------------------------------------------------------------------------------------
- trigger:
  - platform: time_pattern
    minutes: "/30"
  sensor: 
      - name: "battery_supercheap_decision"
        state: >
          {%- set threshold = states('input_number.price_limit_supercheap') | float -%}
          {%- set required_hours = states('input_number.hours_required_supercheap') | int -%}
          {%- set solar_limit = states('input_number.solar_threshold_kwh') | float -%}
          {%- set soc = states('sensor.batteries_state_of_capacity') | float(0) -%}
          {%- set soc_limit = states('input_number.battery_soc_limit_supercheap') | float(80) -%}

          {%- set prices_today = state_attr('sensor.nordpool_kwh_se4_sek_1_10_0', 'today') or [] -%}
          {%- set prices_tomorrow = state_attr('sensor.nordpool_kwh_se4_sek_1_10_0', 'tomorrow') or [] -%}
          {%- set tomorrow_valid = state_attr('sensor.nordpool_kwh_se4_sek_1_10_0', 'tomorrow_valid') -%}
          {%- set prices = prices_today + (prices_tomorrow if tomorrow_valid else []) -%}

          {%- set now_dt = now() -%}
          {%- set start_of_today = now_dt.replace(hour=0, minute=0, second=0, microsecond=0) -%}

          {%- set cheapest = namespace(start=None, avg=None) -%}
          {%- set min_price = namespace(value=999, idx=None) -%}

          {%- for i in range(0, (prices | length) - required_hours + 1) -%}
                    {%- set window_start_dt = start_of_today + timedelta(hours=i) -%}
                    {%- if window_start_dt >= now_dt -%} {# endast framtida timmar #}
                              {%- set window = prices[i:i+required_hours] -%}
                              {%- set avg = (window | map('float') | sum) / (window | length) -%}
                              {%- if avg < min_price.value -%}
                                        {%- set min_price.value = avg -%}
                                        {%- set min_price.idx = i -%}
                              {%- endif -%}
                    {%- endif -%}
          {%- endfor -%}

          {%- if min_price.idx is not none -%}
                    {%- set cheapest.start = start_of_today + timedelta(hours=min_price.idx) -%}
                    {%- set cheapest.avg = min_price.value -%}
          {%- endif -%}

          {%- set result = "" -%}

          {%- if cheapest.start -%}
                    {%- set forecast = state_attr('sensor.solar_forecast_west', 'west') -%}
                    {%- set solar_kwh = 0 -%}

                    {%- if forecast and 'watt_hours_period' in forecast -%}
                              {%- set all_entries = forecast['watt_hours_period'] -%}
                              {%- set interval_end_dt = cheapest.start + timedelta(hours=required_hours) -%}
                              {%- set filtered = all_entries
                                        | selectattr('date', 'defined')
                                        | selectattr('date', '>=', cheapest.start.isoformat())
                                        | selectattr('date', '<', interval_end_dt.isoformat())
                                        | list -%}
                              {%- set valid_entries = filtered
                                        | selectattr('values', 'defined')
                                        | selectattr('values', '>', 0)
                                        | list -%}
                              {%- if valid_entries | length > 0 -%}
                                        {%- set solar_kwh = (valid_entries | map(attribute='values') | sum | default(0)) / 1000 * 0.9 -%}
                              {%- endif -%}
                    {%- endif -%}

                    {%- if solar_kwh < solar_limit and soc < soc_limit and cheapest.avg < threshold -%}
                              {%- set result = cheapest.start.isoformat() ~ " - " ~ (cheapest.start + timedelta(hours=required_hours)).isoformat() -%}
                    {%- endif -%}
          {%- endif -%}

          {{ result }}

---------------------------------------------------------------------------------------------------------


- trigger:
  - trigger: state
    entity_id: input_button.update_battery_cheapest_charge
  sensor:
      - name: "battery_charge_window_cheapest_1a"
        state: >
          {%- set duration = states('input_number.battery_charge_duration_hours') | int %}
          {%- set prices_today = state_attr('sensor.YOUR_NORDPOOL_SENSOR', 'raw_today') %}
          {%- if duration >= 1 and prices_today is not none and prices_today | length >= (14 + duration) %}
            {%- set ns = namespace(min_avg=None, start_index=none) %}
            {%- set start_index = 14 %}
            {%- set end_index = 16 - duration %}
            {%- for i in range(start_index, end_index + 1) %}
              {%- set slice = prices_today[i:i + duration] %}
              {%- if slice | length == duration %}
                {%- set values = slice | map(attribute='value') | list %}
                {%- set avg = (values | sum) / duration %}
                {%- if ns.min_avg is none or avg < ns.min_avg %}
                  {%- set ns.min_avg = avg %}
                  {%- set ns.start_index = i %}
                {%- endif %}
              {%- endif %}
            {%- endfor %}
            {%- if ns.start_index is not none %}
              {%- set start_time = (now().replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(hours=ns.start_index)).astimezone() %}
              {%- set end_time = start_time + timedelta(hours=duration) %}
              {{ start_time.isoformat() ~ ' - ' ~ end_time.isoformat() }}
            {%- else %}
              unavailable
            {%- endif %}
          {%- else %}
            unavailable
          {%- endif %}

--------------------------------------------------------------------------------------------------------

- trigger:
  - trigger: state
    entity_id: input_button.update_battery_cheapest_charge
  sensor:
      - name: "battery_charge_window_cheapest_1b"
        state: >
          {%- set numberOfSequentialHours = states('input_number.battery_charge_duration_hours') | int %}
          {%- set prices_tomorrow = state_attr('sensor.YOUR_NORDPOOL_SENSOR', 'raw_tomorrow') or [] %}
          {%- set ns = namespace(min_avg=None, start_index=0) %}

          {#          DEBUG: Laddar priser för 11:00 till 14:00 imorgon          #}
          {%- set filtered_prices = prices_tomorrow[11:14] %}

          {#          DEBUG: Filtered prices count = {{ filtered_prices | length }}          #}

          {%- for i in range(0, filtered_prices | length - numberOfSequentialHours + 1) %}
                    {%- set slice = filtered_prices[i:i + numberOfSequentialHours] %}
                    {%- set avg = (slice | map(attribute='value') | list | sum) / numberOfSequentialHours %}
                    {%- if ns.min_avg is none or avg < ns.min_avg %}
                              {%- set ns.min_avg = avg %}
                              {%- set ns.start_index = i %}
                    {%- endif %}
          {%- endfor %}

          {%- if (filtered_prices | count) >= (ns.start_index + numberOfSequentialHours) %}
                    {%- set start_obj = filtered_prices[ns.start_index] %}
                    {%- set end_obj = filtered_prices[ns.start_index + numberOfSequentialHours - 1] %}
                    {%- if as_datetime(end_obj.end).hour > 14 %}
                              Inget lämpligt intervall hittades.
                    {%- else %}
                              {%- set start_str = (start_obj.start | as_local).strftime('%Y-%m-%dT%H:%M:%S%z') %}
                              {%- set end_str = (end_obj.end | as_local).strftime('%Y-%m-%dT%H:%M:%S%z') %}
                              {{ start_str[:-2] ~ ':' ~ start_str[-2:] }} - {{ end_str[:-2] ~ ':' ~ end_str[-2:] }}
                    {%- endif %}
          {%- else %}
                    Inget lämpligt intervall hittades.
          {%- endif %}

--------------------------------------------------------------------------------------------------------
- trigger:
  - trigger: state
    entity_id: input_button.update_battery_cheapest_charge
  sensor:
      - name: "battery_charge_window_cheapest_2"
        state: >
          {%- set numberOfSequentialHours = states('input_number.battery_charge_duration_hours') | int %}
          {%- set prices_today = state_attr('sensor.YOUR_NORDPOOL_SENSOR', 'raw_today') or [] %}
          {%- set prices_tomorrow = state_attr('sensor.YOUR_NORDPOOL_SENSOR', 'raw_tomorrow') or [] %}
          {%- set ns = namespace(min_avg=None, start_index=0) %}

          {# Ta priser från idag från kl 23 #}
          {%- set prices_today_filtered = prices_today[23:] %}

          {# Ta morgondagens priser upp till kl 05 (index 0 till 5 inkl) #}
          {%- set prices_tomorrow_filtered = prices_tomorrow[0:6] %}

          {# Kombinera listorna #}
          {%- set combined_prices = prices_today_filtered + prices_tomorrow_filtered %}

          {# Sök billigaste intervall #}
          {%- for i in range(0, combined_prices | length - numberOfSequentialHours + 1) %}
                    {%- set slice = combined_prices[i:i + numberOfSequentialHours] %}
                    {%- set avg = (slice | map(attribute='value') | list | sum) / numberOfSequentialHours %}
                    {%- if ns.min_avg is none or avg < ns.min_avg %}
                              {%- set ns.min_avg = avg %}
                              {%- set ns.start_index = i %}
                    {%- endif %}
          {%- endfor %}

          {%- if combined_prices | length >= numberOfSequentialHours and ns.start_index + numberOfSequentialHours - 1 < combined_prices | length %}
                    {%- set start_obj = combined_prices[ns.start_index] %}
                    {%- set end_obj = combined_prices[ns.start_index + numberOfSequentialHours - 1] %}

                    {# Konvertera till ISO-format med kolon i tidszonen #}
                    {%- set start_str = start_obj.start.strftime('%Y-%m-%dT%H:%M:%S%z') %}
                    {%- set end_str = end_obj.end.strftime('%Y-%m-%dT%H:%M:%S%z') %}

                    {{ start_str[:-2] ~ ':' ~ start_str[-2:] }} - {{ end_str[:-2] ~ ':' ~ end_str[-2:] }}
          {%- else %}
                    Ingen giltigt intervall hittades
          {%- endif %}


----------------------------------------------------------------------------------------------


# TAR FRAM OM NYA ELPRISER ÄR TILLGÄNGLIGA
- binary_sensor:
      - name: "Nordpool Tomorrow Prices Available"
        unique_id: "nordpool_tomorrow_prices_available"
        state: >
          {{ state_attr('sensor.YOUR_NORDPOOL_SENSOR', 'tomorrow_valid') == true }}
